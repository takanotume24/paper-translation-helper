{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAmH0B,aAnH1B,IAAA,EAAA,WAGI,SAAA,IAAA,IAAA,EAAA,KAFQ,KAAA,UAAY,KAgBZ,KAAA,YAAc,WAClB,IAAM,EAAkB,SAAS,eAAe,YAC1C,EAAmB,SAAS,eAAe,cAEjD,GAAK,GAAoB,EAAzB,CAEA,EAAK,UAAY,KAAK,IAAI,OAAO,EAAiB,OAAQ,KAC1D,EAAiB,MAAQ,EAAK,UAAU,WAExC,IAAM,EAAS,EAAgB,MAC/B,GAAK,EAAL,CAEA,IAAM,EAAgB,EAAK,YAAY,GACvC,EAAK,qBAAqB,MA1B1B,KAAK,2BA6Gb,OA1GY,EAAA,UAAA,yBAAR,WAAA,IAAA,EAAA,KACI,OAAO,OAAS,WACZ,IAAM,EAAkB,SAAS,eAAe,YAC1C,EAAmB,SAAS,eAAe,cAEjD,MAAA,GAAA,EAAiB,iBAAiB,QAAS,EAAK,aAChD,MAAA,GAAA,EAAkB,iBAAiB,SAAU,EAAK,eAoBlD,EAAA,UAAA,YAAR,SAAoB,GAChB,IAuBI,EAAgB,EAvBuD,CAC3E,CAAC,OAAQ,IACL,CAAC,MAAO,KACR,CAAC,MAAO,IACR,CAAC,UAAW,QACZ,CAAC,WAAY,SACb,CAAC,SAAU,OACX,CAAC,WAAY,SACb,CAAC,SAAU,OACX,CAAC,YAAa,UACd,CAAC,SAAU,OACX,CAAC,WAAY,QACb,CAAC,WAAY,QACb,CAAC,UAAW,QACZ,CAAC,WAAY,SACb,CAAC,YAAa,UACd,CAAC,kBAAmB,SAAA,GAAS,OAAA,EAAM,OAAS,OAC5C,CAAC,mBAAoB,SAAA,GAAS,MAAA,IAAM,EAAQ,QAC5C,CAAC,uBAAwB,SAAA,GAAS,MAAA,IAAM,EAAQ,QAChD,CAAC,uBAAwB,SAAA,GAAS,MAAA,IAAM,EAAQ,SAKvC,QAAQ,SAAC,GAAC,IAAA,EAAK,EAAA,GAAE,EAAW,EAAA,GAEjC,EAAgB,EAAc,QAAQ,EAAO,KAMrD,IAAM,EAAY,EAAc,MAAM,MAAM,IAAI,SAAA,GAAO,MAAA,GAAA,OAAG,EAAG,SACvD,EAAgB,KAAK,iBAAiB,GAE5C,OAAO,KAAK,qBAAqB,IAI7B,EAAA,UAAA,iBAAR,SAAyB,GAAzB,IAAA,EAAA,KACQ,EAAY,EACZ,EAAsB,GACtB,EAA0B,GAiB9B,OAfA,EAAU,QAAQ,SAAA,GACV,EAAY,EAAS,OAAS,EAAK,YACnC,EAAQ,KAAK,GACb,EAAgB,GAChB,EAAY,GAGhB,EAAc,KAAK,GACnB,GAAa,EAAS,SAGtB,EAAc,OAAS,GACvB,EAAQ,KAAK,GAGV,GAGH,EAAA,UAAA,qBAAR,SAA6B,GACzB,OAAO,EAAQ,IAAI,SAAC,EAAQ,GACxB,MAAA,uEAAA,OAC4B,EAAK,+BAAA,OACpB,EAAK,6BAAA,OAA4B,EAAO,KAAK,IAAI,OAAM,6FAAA,OAEjB,EAAK,MAAA,OAAK,EAAO,KAAK,IAAG,oCAE9E,KAAK,KAGH,EAAA,UAAA,qBAAR,SAA6B,GACzB,IAAM,EAAmB,SAAS,eAAe,aAC5C,IAEL,EAAiB,UAAY,IAErC,EAjHA,GAmHA,IAAI","file":"src.43033155.js","sourceRoot":"../src","sourcesContent":["class OriginalInputHandler {\n    private charLimit = 4500;\n\n    constructor() {\n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners() {\n        window.onload = () => {\n            const originalElement = document.getElementById(\"original\");\n            const charLimitElement = document.getElementById(\"char_limit\");\n\n            originalElement?.addEventListener(\"input\", this.handleInput);\n            charLimitElement?.addEventListener(\"change\", this.handleInput);\n        };\n    }\n\n    private handleInput = (): void => {\n        const originalElement = document.getElementById(\"original\") as HTMLInputElement | null;\n        const charLimitElement = document.getElementById(\"char_limit\") as HTMLInputElement | null;\n\n        if (!originalElement || !charLimitElement) return;\n\n        this.charLimit = Math.max(Number(charLimitElement.value), 1000);\n        charLimitElement.value = this.charLimit.toString();\n\n        const source = originalElement.value;\n        if (!source) return;\n\n        const convertedText = this.processText(source);\n        this.displayConvertedText(convertedText);\n    }\n\n    private processText(text: string): string {\n        const replacements: [RegExp, string | ((substring: string) => string)][] = [\n        [/-\\n/g, \"\"], // Removes hyphen followed by a newline\n            [/\\n/g, \" \"], // Replaces newlines with spaces\n            [/- /g, \"\"], // Removes hyphens followed by a space\n            [/Fig\\. /g, \"Fig.\"], // Formats abbreviation for \"Figure\"\n            [/Figs\\. /g, \"Figs.\"], // Formats abbreviation for \"Figures\"\n            [/No\\. /g, \"No.\"], // Formats abbreviation for \"Number\"\n            [/Prof\\. /g, \"Prof.\"], // Formats abbreviation for \"Professor\"\n            [/Eq\\. /g, \"Eq.\"], // Formats abbreviation for \"Equation\"\n            [/et al\\. /g, \"et al.\"], // Formats \"et al.\"\n            [/Dr\\. /g, \"Dr.\"], // Formats abbreviation for \"Doctor\"\n            [/e\\.g\\. /g, \"e.g.\"], // Formats \"e.g.\"\n            [/i\\.e\\. /g, \"i.e.\"], // Formats \"i.e.\"\n            [/Sec\\. /g, \"Sec.\"], // Formats abbreviation for \"Section\"\n            [/Sect\\. /g, \"Sect.\"], // Formats abbreviation for \"Section\"\n            [/2\\.4 GHz/g, \"2.4GHz\"], // Formats specific frequency value\n            [/[IVXLCDM]+\\.\\s/g, match => match.trim() + \". \"], // Formats Roman numerals followed by a period\n            [/\\.\\d+(?= [A-Z])/g, match => \"[\" + match + \"]. \"], // Formats decimal numbers followed by an uppercase letter\n            [/\\.\\d+,\\d+(?= [A-Z])/g, match => \"[\" + match + \"]. \"], // Formats numbers with commas\n            [/\\.\\d+â€“\\d+(?= [A-Z])/g, match => \"[\" + match + \"]. \"] // Formats number ranges\n    \n        ];\n    \n        let processedText = text;\n        replacements.forEach(([regex, replacement]) => {\n            if (typeof replacement === \"function\") {\n                processedText = processedText.replace(regex, replacement);\n            } else {\n                processedText = processedText.replace(regex, replacement);\n            }\n        });\n    \n        const sentences = processedText.split(\". \").map(str => `${str}.\\n`);\n        const formattedText = this.splitIntoColumns(sentences);\n    \n        return this.createHtmlForColumns(formattedText);\n    }\n    \n\n    private splitIntoColumns(sentences: string[]): string[][] {\n        let charCount = 0;\n        let results: string[][] = [];\n        let currentColumn: string[] = [];\n\n        sentences.forEach(sentence => {\n            if (charCount + sentence.length > this.charLimit) {\n                results.push(currentColumn);\n                currentColumn = [];\n                charCount = 0;\n            }\n\n            currentColumn.push(sentence);\n            charCount += sentence.length;\n        });\n\n        if (currentColumn.length > 0) {\n            results.push(currentColumn);\n        }\n\n        return results;\n    }\n\n    private createHtmlForColumns(columns: string[][]): string {\n        return columns.map((column, index) => \n            `<li class=\"list-group-item\">\n                <label for=\"text_area_${index}\">\n                    No.${index}, Number of characters : ${column.join(\"\").length}\n                </label>\n                <textarea class=\"form-control\" id=\"text_area_${index}\">${column.join(\"\")}</textarea>\n            </li>`\n        ).join(\"\");\n    }\n\n    private displayConvertedText(html: string): void {\n        const convertedElement = document.getElementById(\"converted\");\n        if (!convertedElement) return;\n\n        convertedElement.innerHTML = html;\n    }\n}\n\nnew OriginalInputHandler();\n"]}