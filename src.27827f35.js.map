{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA8EA,aA9EA,IAAA,EAAA,WAGI,SAAA,IACQ,IAAA,EAAmB,SAAS,eAAe,YAC/C,EAAqB,WAAW,GAuExC,OApEW,EAAA,UAAA,OAAP,SAAc,GACJ,IAEF,EAFW,EAAM,OAGrB,EAAqB,WAAW,IAG7B,EAAA,WAAP,SAAkB,GAEV,IAAA,EAAoB,SAAS,eAAe,aAC5C,GAAC,EAAD,CAIA,IAAA,EAAS,EAAiB,MAC1B,GAAC,EAAD,CAWE,IAAA,GADN,GADA,GADA,GADA,GADA,GADA,GADA,GADA,EAAS,EAAO,QAAQ,OAAQ,KAChB,QAAQ,MAAO,MACf,QAAQ,MAAO,KACf,QAAQ,SAAU,SAClB,QAAQ,QAAS,QACjB,QAAQ,UAAW,UACnB,QAAQ,QAAS,QACjB,QAAQ,WAAY,WACb,MAAM,MAAM,IAAI,SAAA,GAAU,OAAA,EAAG,QAChD,EAAsB,KAAK,aAAa,GAE5C,QAAQ,IAAI,GACZ,EAAkB,UAAY,KAAK,WAAW,MAG3C,EAAA,WAAP,SAAkB,GAAlB,IAAA,EAAA,KACQ,EAAS,GACT,EAAI,EAID,OAHP,EAAS,QAAQ,SAAA,GACb,GAAU,EAAK,OAAO,EAAQ,KAAK,IAAK,OAErC,GAEJ,EAAA,OAAP,SAAc,EAAgB,GACnB,MAAA,yCAAyC,EAAS,4BAA4B,EAAO,OAAM,0CAA0C,EAAM,oBAG/I,EAAA,aAAP,SAAoB,GAMT,IAJH,IAAA,EAAa,EACb,EAAU,GACV,EAAI,EAED,EAAI,EAAQ,QAAQ,CAEhB,IADH,IAAA,EAAsB,GACnB,EAAa,KAAK,YACjB,EAAI,EAAQ,QACZ,EAAU,KAAK,EAAQ,IACvB,GAAc,EAAQ,GAAG,OACzB,IAKR,EAAa,EACb,EAAQ,KAAK,GAEV,OAAA,GAxEK,EAAA,WAAa,KA2EjC,EA5EA,GA8EA,OAAO,OAAS,WACR,IAAA,EAAU,IAAI,EACd,EAAmB,SAAS,eAAe,YAC3C,GACA,EAAiB,iBAAiB,QAAS,EAAQ","file":"src.27827f35.js","sourceRoot":"../src","sourcesContent":["class OriginalInputHandler {\n    static readonly WORD_LIMIT = 4500\n\n    constructor() {\n        var original_element = document.getElementById(\"original\") as HTMLInputElement;\n        OriginalInputHandler.showResult(original_element);\n    }\n\n    public doWork(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        var original_element = target as HTMLInputElement;\n        OriginalInputHandler.showResult(original_element);\n    }\n\n    static showResult(original_element: HTMLInputElement) {\n\n        var converted_element = document.getElementById(\"converted\");\n        if (!converted_element) {\n            return;\n        }\n\n        var source = original_element.value;\n        if (!source) {\n            return\n        }\n        source = source.replace(/-\\n/g, \"\")\n        source = source.replace(/\\n/g, \" \")\n        source = source.replace(/- /g, \"\")\n        source = source.replace(/Fig. /g, \"Fig.\")\n        source = source.replace(/No. /g, \"No.\")\n        source = source.replace(/Prof. /g, \"Prof.\")\n        source = source.replace(/Eq. /g, \"Eq.\")\n        source = source.replace(/et al. /g, \"et al.\")\n        const strings = source.split(\". \").map(str => `${str}.\\n`)\n        var results: string[][] = this.spilit_array(strings)\n\n        console.log(results)\n        converted_element.innerHTML = this.show_boxes(results)\n    }\n\n    static show_boxes(stringss: string[][]): string {\n        var result = \"\"\n        var i = 0\n        stringss.forEach(strings => {\n            result += this.in_box(strings.join(\"\"), i++)\n        })\n        return result\n    }\n    static in_box(string: string, colmn_num: number): string {\n        return `<li class=\"list-group-item\"><label>No.${colmn_num}, Number of characters : ${string.length}</label><textarea class=\"form-control\">${string}</textarea></li>`\n    }\n\n    static spilit_array(strings: string[]): string[][] {\n\n        var char_count = 0\n        var results = []\n        var i = 0\n\n        while (i < strings.length) {\n            var new_array: string[] = []\n            while (char_count < this.WORD_LIMIT) {\n                if (i < strings.length) {\n                    new_array.push(strings[i])\n                    char_count += strings[i].length\n                    i++\n                } else {\n                    break\n                }\n            }\n            char_count = 0\n            results.push(new_array)\n        }\n        return results\n    }\n\n}\n\nwindow.onload = () => {\n    var handler = new OriginalInputHandler();\n    var original_element = document.getElementById(\"original\")\n    if (original_element) {\n        original_element.addEventListener(\"keyup\", handler.doWork);\n    }\n};"]}