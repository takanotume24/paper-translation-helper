{"version":3,"sources":["lib/split_into_columns.ts","lib/format_and_split_text_Into_columns.ts","lib/create_html_for_columns.ts","lib/original_input_handler.ts","index.ts"],"names":[],"mappings":"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","file":"src.c04f1bc5.js","sourceRoot":"../src","sourcesContent":["export function splitIntoColumns(\n    sentences: string[],\n    charLimit: number,\n): string[][] {\n    let charCount = 0;\n    let results: string[][] = [];\n    let currentColumn: string[] = [];\n\n    sentences.forEach(sentence => {\n        // Check if adding this sentence exceeds charLimit or if the sentence itself exceeds charLimit\n        if (charCount + sentence.length > charLimit || sentence.length > charLimit) {\n            // Push currentColumn to results if it's not empty\n            if (currentColumn.length > 0) {\n                results.push(currentColumn);\n                currentColumn = [];\n            }\n\n            // If the sentence itself exceeds charLimit, it should be in its own column\n            if (sentence.length > charLimit) {\n                results.push([sentence]);\n                // Reset charCount as the long sentence is placed in its own column\n                charCount = 0;\n                return; // Continue to next sentence\n            }\n        }\n\n        currentColumn.push(sentence);\n        charCount += sentence.length;\n    });\n\n    // Push the last column if not empty\n    if (currentColumn.length > 0) {\n        results.push(currentColumn);\n    }\n\n    return results;\n}\n","import {splitIntoColumns} from './split_into_columns'\n\nexport function formatAndSplitTextIntoColumns(\n    text: string,\n    charLimit: number,\n): string[][] {\n    const replacements: [RegExp, string | ((substring: string) => string)][] = [\n        [/-\\n/g, ''], // Ensure hyphen followed by newline is completely removed\n        [/\\n/g, \" \"], // Replaces newlines with spaces\n        [/- /g, \"\"], // Removes hyphens followed by a space\n        [/Fig\\. /g, \"Fig.\"], // Formats abbreviation for \"Figure\"\n        [/Figs\\. /g, \"Figs.\"], // Formats abbreviation for \"Figures\"\n        [/No\\. /g, \"No.\"], // Formats abbreviation for \"Number\"\n        [/Prof\\. /g, \"Prof.\"], // Formats abbreviation for \"Professor\"\n        [/Eq\\. /g, \"Eq.\"], // Formats abbreviation for \"Equation\"\n        [/et al\\. /g, \"et al.\"], // Formats \"et al.\"\n        [/Dr\\. /g, \"Dr.\"], // Formats abbreviation for \"Doctor\"\n        [/e\\.g\\. /g, \"e.g.\"], // Formats \"e.g.\"\n        [/i\\.e\\. /g, \"i.e.\"], // Formats \"i.e.\"\n        [/Sec\\. /g, \"Sec.\"], // Formats abbreviation for \"Section\"\n        [/Sect\\. /g, \"Sect.\"], // Formats abbreviation for \"Section\"\n        [/2\\.4 GHz/g, \"2.4GHz\"], // Formats specific frequency value\n        [/I\\. /g, \"I.\"],\n        [/II\\. /g, \"II.\"],\n        [/III\\. /g, \"III.\"],\n        [/IV\\. /g, \"IV.\"],\n        [/V\\. /g, \"V.\"],\n        [/VI\\. /g, \"VI.\"],\n        [/VII\\. /g, \"VII.\"],\n        [/VIII\\. /g, \"VIII.\"],\n        [/IX\\. /g, \"IX.\"],\n        [/X\\. /g, \"X.\"],\n        [/\\.\\d+,\\d+(?= [A-Z])/g, match => \"[\" + match + \"]. \"], // Formats numbers with commas\n        [/\\.\\d+-\\d+(?= [A-Z])/g, match => \"[\" + match + \"]. \"], // Formats number ranges\n    ];\n\n    // Process replacements\n    let processedText = text;\n    replacements.forEach(([regex, replacement]) => {\n        processedText = processedText.replace(regex, (match) => typeof replacement === \"function\" ? replacement(match) : replacement);\n    });\n\n    // Split the processed text into sentences\n    const sentences = processedText.split(/(?<=\\.)\\s/);\n\n    // Use the splitIntoColumns function to split the sentences into columns\n    return splitIntoColumns(sentences, charLimit);\n}\n","export function createHtmlForColumns(columns: string[][]): string {\n    return columns.map((column, index) =>\n        `<li class=\"list-group-item\">\n            <label for=\"text_area_${index}\">\n                No.${index}, Number of characters : ${column.join(\"\").length}\n            </label>\n            <textarea class=\"form-control\" id=\"text_area_${index}\">${column.join(\"\\n\")}</textarea>\n        </li>`\n    ).join(\"\");\n}\n","import {formatAndSplitTextIntoColumns} from './format_and_split_text_Into_columns'\nimport {createHtmlForColumns} from './create_html_for_columns'\n\nexport class OriginalInputHandler {\n    private charLimit = 4500;\n\n    constructor() {\n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners() {\n        window.onload = () => {\n            const originalElement = document.getElementById(\"original\");\n            const charLimitElement = document.getElementById(\"char_limit\");\n\n            originalElement?.addEventListener(\"input\", this.handleInput);\n            charLimitElement?.addEventListener(\"change\", this.handleInput);\n        };\n    }\n\n    private handleInput = (): void => {\n        const originalElement = document.getElementById(\"original\") as HTMLInputElement | null;\n        const charLimitElement = document.getElementById(\"char_limit\") as HTMLInputElement | null;\n\n        if (!originalElement || !charLimitElement) return;\n\n        this.charLimit = Math.max(Number(charLimitElement.value), 1000);\n        charLimitElement.value = this.charLimit.toString();\n\n        const source = originalElement.value;\n        if (!source) return;\n\n        const convertedText = formatAndSplitTextIntoColumns(\n            source,\n            this.charLimit,\n        );\n        const html = createHtmlForColumns(convertedText)\n        this.displayConvertedText(html);\n    }\n\n    private displayConvertedText(html: string): void {\n        const convertedElement = document.getElementById(\"converted\");\n        if (!convertedElement) return;\n\n        convertedElement.innerHTML = html;\n    }\n}\n","import { OriginalInputHandler } from \"./lib/original_input_handler\"\n\nnew OriginalInputHandler();\n"]}